const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new Telegraf(token);
import { Telegraf } from 'telegraf';
import { mainBoard, requestKeyBoard, returnToGeneral, returnBoardToProducts, productKeyBoard, returnBoardToRequests } from './boards/index.js';

export const botStart = () => {
    let isProducts = false;
    let isRequests = false;
    let isHistory = false;
    let products = [];
    let selectedProduct = [];
    let requests = [];
    let selectedRequest = [];
    let isLoggining = true;
    let historyString = ''; 

    bot.start((ctx) => {
        ctx.reply('–í—ñ—Ç–∞—î–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ!üëã');
        ctx.reply('üîê–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥—É –≤ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—åüîê');
    });
    
    const getGeneralMenu = (ctx) => {
        isProducts = false;
        isRequests = false;
        isHistory = false;
        ctx.reply('üë§–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—éüë§', mainBoard);
    }

    bot.hears(/.*/, async (ctx) => {
        if (isLoggining) {
            const userPassword = ctx.message.text;
            const postData = { username: 'admin', password: userPassword };

            fetch('http://localhost:5000/auth/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(postData),
            })
                .then((response) => {
                    if (response.status === 200) {
                        isLoggining = false;
                        ctx.reply("‚úÖ–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥!‚úÖ", mainBoard)
                    } else ctx.reply('‚ùå–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.‚ùå');
                });
        } else {
            ctx.reply('–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é!ü§∑');
        }
    });

    bot.on('callback_query', async (ctx) => {
        const callback_data = ctx.callbackQuery.data;

        // –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤
        if (callback_data === 'products') {
            try {
                isProducts = true;
                const response = await fetch('http://localhost:5000/products');
                products = await response.json();

                let productsInline = products.map(product => ([{ text: `ü™ô${product.name}ü™ô`, callback_data: product._id }]));
                
                productsInline.push([{ text: "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å‚¨ÖÔ∏è", callback_data: "general_menu"}]);

                const productsKeyBoard = {
                    reply_markup: { inline_keyboard: productsInline }
                };

                ctx.reply('üìã–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤: ', productsKeyBoard);
            } catch (error) {
                console.error('Error fetching products:', error);
            }
        }
        if (isProducts) {
            if (callback_data !== 'products' && callback_data !== 'remove' && callback_data !== 'general_menu') {
                const selectProduct = products.find(product => product._id === callback_data);
                ctx.reply(`üß∫–ü—Ä–æ–¥—É–∫—Ç: ${selectProduct.name}`, productKeyBoard);
                
                selectedProduct = selectProduct;
            }
            if (callback_data === 'remove') {
                fetch(`http://localhost:5000/products/${selectedProduct._id}`, { method: 'DELETE' });
                ctx.reply('–ü—Ä–æ–¥—É–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ‚úÖ', returnBoardToProducts)
            }
        }
        
        // –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤
        if (callback_data === 'requests') {
            try {
                isRequests = true;
                const response = await fetch('http://localhost:5000/requests/pending');
                requests = await response.json();
                requests = requests.requests;

                let requestsInline = requests.map(request => [
                    { text: `‚ùî${request.productId.name}: ${request._id}‚ùî`, callback_data: request._id }
                ]); 
                
                requestsInline.push([{ text: "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å", callback_data: "general_menu"}]);

                const requestKeyBoard = {
                    reply_markup: { inline_keyboard: requestsInline }
                };

                ctx.reply('üìã–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤: ', requestKeyBoard);
            } catch (error) {
                console.error('Error fetching requests:', error);
            }
        }
        if (isRequests) {
            if (callback_data !== 'requests' && callback_data !== 'allow', callback_data !== 'deny' && callback_data !== 'general_menu') {
                const selectRequest = requests.find(request => request._id === callback_data);

                if (selectRequest) {
                    const reqString = `üîÄ–ó–∞–ø–∏—Ç - ${selectRequest.productId.name}: ${selectRequest._id}`;
                    ctx.reply(reqString, requestKeyBoard);
                    
                    selectedRequest = selectRequest;
                }
            }
            if (callback_data === 'allow') {
                fetch(`http://localhost:5000/requests/${selectedRequest._id}/allow`, { method: 'POST' });
                ctx.reply('–ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–æ', returnBoardToRequests)
            }
            if (callback_data === 'deny') {
                fetch(`http://localhost:5000/requests/${selectedRequest._id}/deny`, { method: 'POST' });
                ctx.reply('–ó–∞–ø–∏—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ', returnBoardToRequests)
            }
        }

        // –û–±—Ä–æ–±–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó
        if (callback_data === 'history') {
            try {
                isHistory = true;
                const response = await fetch('http://localhost:5000/requests/pending');
                requests = await response.json();
                requests = requests.requests;                
                historyString = '‚è≥–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–ø–∏—Ç—ñ–≤:'

                requests.map(request => {
                    historyString += `
                        \nüÜîId –∑–∞–ø–∏—Ç—É: ${request._id}\nüÜîId –ø—Ä–æ–¥—É–∫—Ç—É: ${request.productId._id}\n‚ÑπÔ∏è–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Ç–∞: ${request.status}\nüìÖ–°—Ç–≤–æ—Ä–µ–Ω–∏–π: ${new Date(request.createdAt).toLocaleString()}\nüìÖ–ó–º—ñ–Ω–µ–Ω–∏–π: ${new Date(request.updatedAt).toLocaleString()}                   
                    `;
                });

                ctx.reply(historyString, returnToGeneral)
            } catch (error) {
                console.error('Error fetching history:', error);
            }
        }
        // –ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if (callback_data === 'general_menu') {
            getGeneralMenu(ctx);
        }
    });
    
    bot.launch();
}